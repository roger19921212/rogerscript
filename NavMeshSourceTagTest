using UnityEngine;
using UnityEngine.AI;
using System.Collections.Generic;



// Tagging component for use with the LocalNavMeshBuilder
// Supports mesh-filter and terrain - can be extended to physics and/or primitives
[DefaultExecutionOrder(-200)]
public class NavMeshSourceTagTest : MonoBehaviour
{
    // Global containers for all active mesh/terrain tags
    //public static List<MeshFilter> m_Meshes = new List<MeshFilter>();
    //public static List<Terrain> m_Terrains = new List<Terrain>();
    public int NavMeshInt;

    public class M_MeshesClass
    {
        public int MeshInt;
        public MeshFilter m_Meshes = new MeshFilter();
    }
    public class M_TerrainsClass
    {
        public int TerrainsInt;
        public Terrain m_Terrains = new Terrain();
    }
    public static List<M_MeshesClass> M_Meshes = new List<M_MeshesClass>();
    public static List<M_TerrainsClass> M_Terrains = new List<M_TerrainsClass>();
    void OnEnable()
    {
        var m = GetComponent<MeshFilter>();
        if (m != null)
        {
            M_MeshesClass m_MeshesClass = new M_MeshesClass();
            m_MeshesClass.MeshInt = NavMeshInt;
            m_MeshesClass.m_Meshes = GetComponent<MeshFilter>();
            M_Meshes.Add(m_MeshesClass);
        }

        var t = GetComponent<Terrain>();
        if (t != null)
        {
            M_TerrainsClass m_TerrainsClass = new M_TerrainsClass();
            m_TerrainsClass.TerrainsInt = NavMeshInt;
            m_TerrainsClass.m_Terrains = GetComponent<Terrain>();
            M_Terrains.Add(m_TerrainsClass);
        }
    }

    void OnDisable()
    {
        var m = GetComponent<MeshFilter>();
        if (m != null)
        {
            M_MeshesClass m_MeshesClass = new M_MeshesClass();
            m_MeshesClass.MeshInt = NavMeshInt;
            m_MeshesClass.m_Meshes = GetComponent<MeshFilter>();
            M_Meshes.Remove(m_MeshesClass);
        }

        var t = GetComponent<Terrain>();
        if (t != null)
        {
            M_TerrainsClass m_TerrainsClass = new M_TerrainsClass();
            m_TerrainsClass.TerrainsInt = NavMeshInt;
            m_TerrainsClass.m_Terrains = GetComponent<Terrain>();
            M_Terrains.Remove(m_TerrainsClass);
        }
    }

    // Collect all the navmesh build sources for enabled objects tagged by this component
    public static void Collect(ref List<NavMeshBuildSource> sources)
    {
        sources.Clear();

        for (var i = 0; i < M_Meshes.Count; ++i)
        {
            var mf = M_Meshes[i].m_Meshes;
            if (mf == null) continue;

            var m = mf.sharedMesh;
            if (m == null) continue;

            var s = new NavMeshBuildSource();
            s.shape = NavMeshBuildSourceShape.Mesh;
            s.sourceObject = m;
            s.transform = mf.transform.localToWorldMatrix;
            s.area = M_Meshes[i].MeshInt;
            sources.Add(s);
        }

        for (var i = 0; i < M_Terrains.Count; ++i)
        {
            var t = M_Terrains[i].m_Terrains;
            if (t == null) continue;

            var s = new NavMeshBuildSource();
            s.shape = NavMeshBuildSourceShape.Terrain;
            s.sourceObject = t.terrainData;
            // Terrain system only supports translation - so we pass translation only to back-end
            s.transform = Matrix4x4.TRS(t.transform.position, Quaternion.identity, Vector3.one);
            s.area = M_Terrains[i].TerrainsInt;
            sources.Add(s);
        }
    }
}
